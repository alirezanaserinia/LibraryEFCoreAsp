// <auto-generated />
using System;
using BehKhaan.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BehKhaan.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BehKhaan.Domain.Entities.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BehKhaan.Domain.Entities.Book_Shelf", b =>
                {
                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShelfId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PuttingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudyState")
                        .HasColumnType("int");

                    b.HasKey("BookId", "ShelfId");

                    b.HasIndex("ShelfId");

                    b.ToTable("Books_Shelfs");
                });

            modelBuilder.Entity("BehKhaan.Domain.Entities.Shelf", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Shelfs");
                });

            modelBuilder.Entity("BehKhaan.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BehKhaan.Domain.Entities.Book_Shelf", b =>
                {
                    b.HasOne("BehKhaan.Domain.Entities.Book", "Book")
                        .WithMany("Books_Shelfs")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BehKhaan.Domain.Entities.Shelf", "Shelf")
                        .WithMany("Books_Shelfs")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("BehKhaan.Domain.Entities.Shelf", b =>
                {
                    b.HasOne("BehKhaan.Domain.Entities.User", "User")
                        .WithMany("Shelfs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BehKhaan.Domain.Entities.Book", b =>
                {
                    b.Navigation("Books_Shelfs");
                });

            modelBuilder.Entity("BehKhaan.Domain.Entities.Shelf", b =>
                {
                    b.Navigation("Books_Shelfs");
                });

            modelBuilder.Entity("BehKhaan.Domain.Entities.User", b =>
                {
                    b.Navigation("Shelfs");
                });
#pragma warning restore 612, 618
        }
    }
}
